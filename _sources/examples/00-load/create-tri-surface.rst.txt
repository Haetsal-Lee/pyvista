.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_00-load_create-tri-surface.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-load_create-tri-surface.py:


Create Triangulated Surface
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create a surface from a set of points through a Delaunay triangulation.

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 2
    import vtki
    import numpy as np







First, create some points for the surface.


.. code-block:: default


    # Define a simple Gaussian surface
    n = 20
    x = np.linspace(-200,200, num=n) + np.random.uniform(-5, 5, size=n)
    y = np.linspace(-200,200, num=n) + np.random.uniform(-5, 5, size=n)
    xx, yy = np.meshgrid(x, y)
    A, b = 100, 100
    zz = A*np.exp(-0.5*((xx/b)**2. + (yy/b)**2.))

    # Get the points as a 2D NumPy array (N by 3)
    points = np.c_[xx.reshape(-1), yy.reshape(-1), zz.reshape(-1)]
    print(points[0:5, :])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[-201.86923788 -200.20982538    1.75665603]
     [-181.97628472 -200.20982538    2.57333588]
     [-159.05173606 -200.20982538    3.80417345]
     [-132.71771756 -200.20982538    5.58604682]
     [-120.40913117 -200.20982538    6.52769264]]


Now use those points to create a point cloud ``vtki`` data object. This will
be encompassed in a :class:`vtki.PolyData` object.


.. code-block:: default


    # simply pass the numpy points to the PolyData constructor
    cloud = vtki.PolyData(points)
    vtki.set_plot_theme('doc')
    cloud.plot(point_size=15)




.. image:: /examples/00-load/images/sphx_glr_create-tri-surface_001.png
    :class: sphx-glr-single-img




Now that we have a ``vtki`` data structure of the points, we can perform a
triangulation to turn those boring discrete points into a connected surface.


.. code-block:: default


    surf = cloud.delaunay_2d()
    surf.plot(show_edges=True)



.. image:: /examples/00-load/images/sphx_glr_create-tri-surface_002.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.231 seconds)


.. _sphx_glr_download_examples_00-load_create-tri-surface.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: create-tri-surface.py <create-tri-surface.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: create-tri-surface.ipynb <create-tri-surface.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
