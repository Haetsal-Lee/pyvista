.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_00-load_read-file.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-load_read-file.py:


Load and Plot from a File
~~~~~~~~~~~~~~~~~~~~~~~~~

Read a dataset from a known file type

.. code-block:: default


    import vtki
    from vtki import examples
    import numpy as np
    import matplotlib.pyplot as plt







Loading a mesh is trivial.  The following code block uses a built-in example
file, displays an airplane mesh, saves a screenshot, and returns the camera's
position:


.. code-block:: default


    # Get a sample file
    filename = examples.planefile
    mesh = vtki.read(filename)
    cpos = mesh.plot()




.. image:: /examples/00-load/images/sphx_glr_read-file_001.png
    :class: sphx-glr-single-img




You can also take a screenshot without creating an interactive plot window using
the ``Plotter``:


.. code-block:: default


    plotter = vtki.Plotter(off_screen=True)
    plotter.add_mesh(mesh)
    plotter.show(auto_close=False)
    # plotter.screenshot('airplane.png')
    plotter.close()




.. image:: /examples/00-load/images/sphx_glr_read-file_002.png
    :class: sphx-glr-single-img




The ``img`` array can be used to plot the screenshot in ``matplotlib``:


.. code-block:: default


    plt.imshow(plotter.image)
    plt.show()




.. image:: /examples/00-load/images/sphx_glr_read-file_003.png
    :class: sphx-glr-single-img




If you need to setup the camera you can do this by plotting first and getting
the camera after running the ``plot`` function:


.. code-block:: default


    plotter = vtki.Plotter()
    plotter.add_mesh(mesh)
    cpos = plotter.show()




.. image:: /examples/00-load/images/sphx_glr_read-file_004.png
    :class: sphx-glr-single-img




You can then use this cached camera for additional plotting without having to
manually interact with the ``vtk`` plot window:


.. code-block:: default


    plotter = vtki.Plotter(off_screen=True)
    plotter.add_mesh(mesh)
    plotter.camera_position = cpos
    plotter.show(auto_close=False)
    # plotter.screenshot('airplane.png')
    plotter.close()




.. image:: /examples/00-load/images/sphx_glr_read-file_005.png
    :class: sphx-glr-single-img




The points from the mesh are directly accessible as a NumPy array:


.. code-block:: default


    print(mesh.points)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[896.994    48.7601   82.2656 ]
     [906.593    48.7601   80.7452 ]
     [907.539    55.4902   83.6581 ]
     ...
     [806.665   627.363     5.11482]
     [806.665   654.432     7.51998]
     [806.665   681.537     9.48744]]


The faces from the mesh are also directly accessible as a NumPy array:


.. code-block:: default


    print(mesh.faces.reshape(-1, 4)[:, 1:])




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[   0    1    2]
     [   0    2    3]
     [   4    5    1]
     ...
     [1324 1333 1323]
     [1325 1216 1334]
     [1325 1334 1324]]



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.321 seconds)


.. _sphx_glr_download_examples_00-load_read-file.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: read-file.py <read-file.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: read-file.ipynb <read-file.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
