.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_01-filter_slicing.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_slicing.py:


Slicing
~~~~~~~

Extract thin planar slices from a volume

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 2
    import pyvista as pv
    from pyvista import examples
    import matplotlib.pyplot as plt







PyVista meshes have several slicing filters bound directly to all datasets.
Thes filters allow you to slice through a volumetric dataset to extract and
view sections through the volume of data.

One of the most common slicing filters used in PyVista is the
:func:`pyvista.DataSetFilters.slice_orthogonal` filter which creates three
orthogonal slices through the dataset on the three caresian planes.
For example, let's slice through the sample geostatitical training image
volume. First, load up the volume and preview it:


.. code-block:: default


    mesh = examples.load_channels()
    # define a categorical colormap
    cmap = plt.cm.get_cmap('viridis', 4)


    mesh.plot(cmap=cmap)




.. image:: /examples/01-filter/images/sphx_glr_slicing_001.png
    :class: sphx-glr-single-img




Note that this dataset is a 3D volume and their might be regions within the
volume that we would like to inspect. We can create slices through the mesh
to gain insight about the internals of the volume.


.. code-block:: default


    slices = mesh.slice_orthogonal()

    slices.plot(cmap=cmap)





.. image:: /examples/01-filter/images/sphx_glr_slicing_002.png
    :class: sphx-glr-single-img




The orthogonal slices can be easily translated throughout the volume:


.. code-block:: default


    slices = mesh.slice_orthogonal(x=20, y=20, z=30)
    slices.plot(cmap=cmap)



.. image:: /examples/01-filter/images/sphx_glr_slicing_003.png
    :class: sphx-glr-single-img




We can also add just a single slice of the volume by specifying the origin
and normal of the slicing plane with the :func:`pyvista.DataSetFilters.slice`
filter:


.. code-block:: default


    # Sing slice - origin defaults to center of the mesh
    single_slice = mesh.slice(normal=[1,1,0])

    p = pv.Plotter()
    p.add_mesh(mesh.outline(), color='k')
    p.add_mesh(single_slice, cmap=cmap)
    p.show()



.. image:: /examples/01-filter/images/sphx_glr_slicing_004.png
    :class: sphx-glr-single-img




Adding slicing planes uniformly across an axial direction can also be
automated with the :func:`pyvista.DataSetFilters.slice_along_axis` filter:


.. code-block:: default


    slices = mesh.slice_along_axis(n=7, axis='y')

    slices.plot(cmap=cmap)



.. image:: /examples/01-filter/images/sphx_glr_slicing_005.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.922 seconds)


.. _sphx_glr_download_examples_01-filter_slicing.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: slicing.py <slicing.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: slicing.ipynb <slicing.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
