.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_01-filter_streamlines.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_streamlines.py:


Streamlines
~~~~~~~~~~~

Integrate a vector field to generate streamlines.
This example generates streamlines of blood velocity. An isosurface of speed
provides context. The starting positions for the streamtubes were determined
by experimenting with the data.


.. code-block:: default


    # sphinx_gallery_thumbnail_number = 1
    import vtki
    from vtki import examples







Download a sample dataset containing a vector field that can be integrated.


.. code-block:: default


    mesh = examples.download_carotid()









Run the stream line filtering algorithm.


.. code-block:: default


    streamlines, src = mesh.streamlines(return_source=True, max_time=100.0,
                               initial_step_length=2., terminal_speed=0.1,
                               n_points=25, source_radius=2.0,
                               source_center=(133.1, 116.3, 5.0) )







Display the results! Please note that because this dataset's velocity field
was measured with low resolution, many streamlines travel outside the artery.


.. code-block:: default


    p = vtki.Plotter(notebook=1)
    p.add_mesh(mesh.outline(), color='k')
    p.add_mesh(streamlines.tube(radius=0.15))
    p.add_mesh(src)
    p.add_mesh(mesh.contour([160]).wireframe(),
               color='grey', opacity=0.25)
    p.camera_position = [(182., 177., 50),
                         (139, 105, 19),
                         (-0.2, -0.2, 1)]
    p.show()





.. image:: /examples/01-filter/images/sphx_glr_streamlines_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <PIL.Image.Image image mode=RGB size=2048x1536 at 0x7FF8DF6A5668>


Here is another example of blood flow:


.. code-block:: default

    mesh = examples.download_blood_vessels().cell_data_to_point_data()
    mesh.set_active_scalar('velocity')
    streamlines, src = mesh.streamlines(return_source=True, source_radius=10,
                               source_center=(92.46, 74.37, 135.5) ,)









.. code-block:: default

    boundary = mesh.decimate_boundary().wireframe()

    p = vtki.Plotter(notebook=1)
    p.add_mesh(streamlines.tube(radius=0.2), ligthing=False)
    p.add_mesh(src)
    p.add_mesh(boundary, color='grey', opacity=0.25)
    p.camera_position = [(10, 9.5, -43),
                         (87.0, 73.5, 123.0),
                         (-0.5, -0.7, 0.5)]
    p.show()



.. image:: /examples/01-filter/images/sphx_glr_streamlines_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <PIL.Image.Image image mode=RGB size=2048x1536 at 0x7FF8DF5DC550>



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.046 seconds)


.. _sphx_glr_download_examples_01-filter_streamlines.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: streamlines.py <streamlines.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: streamlines.ipynb <streamlines.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
